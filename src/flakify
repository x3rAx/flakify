#!/usr/bin/env bash

# More safety by turning bugs into errors.
# Use `${PIPESTATUS[n]}` to check for the `n`-th pipe command's exit status.
# Make sure there are no uninitialized variables.
# To allow a non-zero exit status or to allow a pipe to fail without exiting
# the script, prefix the command with `!`.
# Option `noclobber` makes sure piping into a file with `>` does not
# override existing files. Use `>|` to overwrite files instead.
# Environment variables are `UPPER_SNAKE_CASE`, global constants are
# `_UNDERSCORE_PREFIXED` and global variables are `_underscore_prefixed`
set -o errexit -o pipefail -o nounset -o noclobber
IFS=$'\n\t' # Split on newlines and tabs (but not on spaces)

: ${XDG_CONFIG_HOME:=$HOME/.config}
: ${XDG_CACHE_HOME:=$HOME/.cache}

readonly _SCRIPT="$(realpath "$0")"
readonly _SCRIPT_NAME="${_SCRIPT##*/}"
readonly _SCRIPT_DIR="${_SCRIPT%/*}"

err() { echo >&2 "${_SCRIPT_NAME}: $@"; }

readonly _ERR_USAGE=2
readonly _ERR_PROGRAMMING=255

readonly _USAGE="
  Usage:
    $_SCRIPT_NAME <options> [shell] [dir]

  ARGUMENTS:
    template        The template to use (default: 'default')
    dir             The target directory where the template will be installed
                    (default: '.')

  OPTIONS:
    -h, --help      Show this help message.
    -l, --list      List all available templates
"

readonly _OPTIONS='hl'
readonly _LONGOPTS='help,list'

parsed="$(getopt -o "$_OPTIONS" -l "$_LONGOPTS" -n "$_SCRIPT_NAME" -- "$@")"
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then echo >&2 "$_USAGE"; exit $_ERR_USAGE; fi
eval set -- "${parsed[@]}"; unset parsed

_list=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)      echo "$_USAGE"; exit; ;;
        -l|--list)      _list=true; shift; ;;
        --)             shift; break; ;;
        *)              err "Programming error"; exit $_ERR_PROGRAMMING; ;;
    esac
done

# --- main program -------------------------------------------------------------

_FLAKE='github:x3rAx/flakify'

template="${1:-}"
dir="${2:-.}"

list_templates() {
    echo ''
    nix flake show "$_FLAKE" --all-systems --json | jq -r '.templates | to_entries[] | "\(.key)\n    \(.value.description)\n"'
}

if [[ -z $template ]]; then
    list_templates
    exit 1
fi

if [[ $_list == true ]]; then
    list_templates
    exit
fi

nix flake new -t "${_FLAKE}#${template}" "${dir}"

echo >&2 ''
echo >&2 ''
echo >&2 '    Run: `direnv allow` to enable the dev shell'
echo >&2 ''
